pip install ollama gradio chromadb langchain pypdf

import gradio as gr
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import OllamaEmbeddings
from langchain.vectorstores import Chroma
import ollama
import os

# Initialize the embedding model and Chroma for document storage
embedding_model = OllamaEmbeddings(model="llama3")
chroma_db = Chroma(collection_name="pdf_chunks", embedding_function=embedding_model)

# Function to split and embed PDF text into Chroma
def load_and_split_pdf(pdf_file):
    loader = PyPDFLoader(pdf_file)
    documents = loader.load()
    
    # Split the document into smaller chunks
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
    texts = text_splitter.split_documents(documents)
    
    # Embed and store the chunks in Chroma
    chroma_db.add_documents(documents=texts)
    
    return texts

# Function to process user queries
def process_query(query, pdf_file):
    if pdf_file:
        # If a PDF is provided, split and index it
        load_and_split_pdf(pdf_file)
    
    # Search for the most relevant chunks in Chroma
    docs = chroma_db.similarity_search(query)
    
    # Combine the retrieved text chunks
    retrieved_text = "\n".join([doc.page_content for doc in docs])
    
    # Construct the prompt with the user's query and the retrieved text
    prompt = query + "\n" + retrieved_text
    
    # Generate the response using LLaMA3 via Ollama
    response = ollama.generate(model="llama3", prompt=prompt)
    
    return response['text']

# Gradio Interface
iface = gr.Interface(
    fn=process_query,
    inputs=[
        gr.Textbox(label="Your Question"),
        gr.File(label="Upload PDF (optional)")
    ],
    outputs=gr.Textbox(label="Response"),
    title="Question Your PDF Files",
    description="This program uses LLaMA3 via Ollama to get the answers to your questions from documents"
)

# Launch the Gradio app
if __name__ == "__main__":
    iface.launch(server_name="0.0.0.0", server_port=7860)
